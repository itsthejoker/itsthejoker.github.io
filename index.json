[{"categories":["writing","thoughts"],"content":"Children’s Hospitals \u0026 Me I’ve been doing a lot of work at a local children’s hospital recently, and there’s a lot of things there that make me think. I wanted to take some time and write about it since I’ve been there for a few months now, and I think I have a better handle on why I’m so interested in it. ","date":"2023-07-01","objectID":"/empathy_and_trauma/:1:0","tags":["trauma","hospitals","children"],"title":"Empathy and Trauma","uri":"/empathy_and_trauma/"},{"categories":["writing","thoughts"],"content":"Inpatients and Empathy While at the hospital, I spend a fair amount of time with inpatients in their rooms. I’m not going to get into the details of it, but suffice it to say that I engage with them in a form of ‘play therapy’. Definition Check! Outpatients are folks who come to the hospital and are discharged that day. Inpatients are folks who have to stay in the hospital for longer periods of time, anywhere from a day or two to months or years. As part of my work, I spend a lot of time wandering the hospital, from ward to ward, hallway to hallway, elevator to elevator. It’s the things that I see on these walks that stand out to me the most, because the things that I see here are the things that are the most unexplained. NO WHITE COATS, a door sign proclaims. It’s easier to understand this as threatening from my vantage point. Also thankfully, it’s not something I have to worry about; no coats of any kind for me while on the floors. NO MALE ATTENDINGS reads a sign on a door with the shutters pulled tightly closed. As a male (though not an attending physician), that sign still applies to me, and I cannot help but wonder what is behind that door as I walk past. Each room is filled with suffering, and if I’m lucky I’ll be able to distract them from it for a while. But not this room. I walk on. NO RUNNING WATER reads another. Another room that’s not on my list, but representative of a horror I can only imagine. In this case, it’s not that the room is lacking a functional sink; rather, any liquids must be brought in after being drawn from somewhere else. Each sign is placed with care and concern. Each sign tells its own story, and though I don’t know the details, the signs themselves tell enough. After my shift, sometimes I sit in my car and think about the signs I’ve seen that day. The signs I didn’t know needed to be signs. The signs I hadn’t thought needed to be signs; am I just so close-minded that I assumed no one would have these experiences? Or am I broadening my horizons with each sign I see? ","date":"2023-07-01","objectID":"/empathy_and_trauma/:2:0","tags":["trauma","hospitals","children"],"title":"Empathy and Trauma","uri":"/empathy_and_trauma/"},{"categories":["writing","thoughts"],"content":"The Green Heart Kids What do you do when you have a patient that needs to hide? I don’t mean ‘hide from the nurse’ though that’s a game that many inpatients play at least a few times. I mean, hide from the media. Hide from an abusive parent. Hide from the world. Enter the Green Hearts1. A designation that is attached to a name in the patient system, it means one very simple thing: this patient does not exist. We’ve never heard of them. They’re not here. Don’t know what you’re talking about. No one by that name here. If you’ve never thought about this before, I want you to stop and ponder for a minute. Think about the kinds of circumstances that could necessitate hiding a child away so that they can receive medical care. Think about what the green heart means. I work with Green Heart kids almost every week, and for the most part, they’re just normal kids. Kids with cancer. Kids with heart problems. Gastrointestinal problems. But still kids. Most of the reason it’s stuck with me is that I just never thought that a process like this existed. That there could be a need for such a process. Is that my privilege speaking? Most likely, but every week I learn a little more. ","date":"2023-07-01","objectID":"/empathy_and_trauma/:3:0","tags":["trauma","hospitals","children"],"title":"Empathy and Trauma","uri":"/empathy_and_trauma/"},{"categories":["writing","thoughts"],"content":"The Hallways The hallways of a children’s hospital are a special place to be, specifically because they aren’t tucked away like the rooms are. The rooms are about the kids – the hallways are about the parents. Frantic blinking of trying to hold back tears for the billionth time. Arguments about money. Talking to a nurse about end of life care. Asking if there’s a way to make the next procedure less painful. Calls to family. The parents need just as much emotional support as the kids do, but I can’t give it. There are programs for them, too – through the library and through other things, the adults do have someone to talk to. But the hallway is their church; it hears their prayers. It hears the muffled sobs. It hears what they don’t want anyone else to hear. And sometimes, so do I. ","date":"2023-07-01","objectID":"/empathy_and_trauma/:4:0","tags":["trauma","hospitals","children"],"title":"Empathy and Trauma","uri":"/empathy_and_trauma/"},{"categories":["writing","thoughts"],"content":"Closing There’s no real closing here. It’s just a rambling collection of thoughts that have been bounding around in my head for the past few months. Things that I never thought about, things that are the bread and butter of others stronger than I. For example, I was sitting with a burn patient and listening as they told the nurse about how it involved an accidental fall into a fire pit. The nurse nodded sagely and said, “Lucky it’s just your arm. The younger ones usually go in headfirst.” There’s so much suffering. If I’m lucky, I can distract them for a while. That’s my job, and I’d like to think I’m good at it. One kid at a time. One smile at a time. Just gotta get better at putting myself in their shoes. They aren’t green hearts. The actual designation is different, but I’m calling them green hearts for this post. ↩︎ ","date":"2023-07-01","objectID":"/empathy_and_trauma/:5:0","tags":["trauma","hospitals","children"],"title":"Empathy and Trauma","uri":"/empathy_and_trauma/"},{"categories":["python"],"content":"Your code + a zip archive = single file deployments I know that’s an incredibly enticing intro, but bear with me. We’ll get there. ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:1:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"Zip archives? Way back in the dark ages of 2008, Python 2.6 was released. This release was particularly exciting because it brought us such wondrous things as the multiprocessing module, the io module, and codified the with statement as a keyword for doing better-controlled contextual processing. It also brought a lot of existential angst about the upcoming Python 3 release, but we’re skipping over that. Buried in the release notes was a single paragraph that mentioned “oh hey by the way you can now run Python files from inside a zip archive”. This is a pretty accurate representation of how I felt reading this in the future. Imagine, being able to call a zip file with Python and have it actually work: # You don't have to imagine. This works. ❯ echo \"print('hello, world!')\" \u003e\u003e __main__.py ❯ zip test.zip __main__.py adding: __main__.py (stored 0%) ❯ python test.zip Hello, World! This was, somewhat predictably, completely missed by the vast majority of folks. In 2013, PEP 441 attempted to fix this by bringing the whole ‘package your stuff in a zip file’ thing into the public view by adding the zipapp module to the standard library, adding a whole suite of tools to make working with zipapps much easier for the average Python developer. This was such a revolutionary change that it got a whole three sentences in the release notes and was more or less completely overshadowed by the introduction of typing as a core Python feature. Sorry, Daniel and Paul – you tried. Now that we have reasonable support for making and using zipapps, we can cover the single huge glaring issue: no third-party dependencies. ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:2:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"The Problem Zipapps are fantastic! They let you bundle ALL of your Python code into a single zip archive, pass that archive off to someone else, and they can just run it! However, there’s one glaring issue: you can only rely on the standard library. Third party dependencies are right out unless you manually bundle them with your codebase, which is both a pain to do in the first place and an easy way to accidentally run afoul of licenses if you’re not paying close enough attention. I don’t know about you, but I basically never write things that rely only on the standard library – third party dependencies are a fact of life for all the Python developers I know. So how can we get the power of third party dependencies with the pure awesomeness of being able to package an entire runnable program into a zip file? The answer, as it turns out, was figured out by all those cool folks at Twitter who aren’t there anymore. They designed and built pex, a system that solves the third party dependency problem by essentially zipping up the virtual environment (minus the interpreter) and extracting it prior to running the zipapp. The implementation used by pex is functional, though a bit on the slow side. shiv is LinkedIn’s attempt at solving the speed issues of pex while still keeping all of the functionality. (You can find more information about the speed differences between pex and shiv here. You can also find more technical information on shiv’s approach at that link as well.) You only need a few things installed to actually make a shiv app: a recent version of Python an environment that includes shiv a setup.py file that lists all the dependencies of your app your app code itself That’s really it, and in fact, that’s all you need to have in your CI pipeline if you want to automatically build your shiv apps for CI-controlled releases. Take a look at this example, starting from an empty directory: # we need a virtual environment to start in. ❯ python -m venv .venv ❯ . .venv/bin/activate # Now that we have an environment to work in, # we'll install shiv. ❯ pip install shiv Collecting shiv Using cached shiv-1.0.3-py2.py3-none-any.whl (19 kB) Collecting click!=7.0,\u003e=6.7 (from shiv) Using cached click-8.1.3-py3-none-any.whl (96 kB) Requirement already satisfied: pip\u003e=9.0.3 in ./.venv/lib/python3.11/site-packages (from shiv) (23.1.1) Requirement already satisfied: setuptools in ./.venv/lib/python3.11/site-packages (from shiv) (65.5.0) Installing collected packages: click, shiv Successfully installed click-8.1.3 shiv-1.0.3 # Cool. Let's make our app. ❯ mkdir myapp ❯ echo \"import httpx\\ndef main():\\n print(httpx.get)\" \u003e\u003e myapp/cli.py ❯ touch myapp/__init__.py We have a single file that calls a third-party dependency and attempts to print a reference. If we call it now with python cli.py it’ll break, since we don’t have httpx installed. However, we’ll add a reference to that in our setup.py file now. ❯ touch setup.py ❯ tee -a setup.py \u003c\u003cEOF ∙ from setuptools import setup ∙ setup_kwargs = { ∙ 'name': 'myapp', ∙ 'version': '0.0.1', ∙ 'packages': ['myapp'], ∙ 'install_requires': ['httpx'], ∙ 'entry_points': {'console_scripts': ['myapp = myapp.cli:main']}, ∙ 'python_requires': '\u003e=3.10' ∙ } ∙ setup(**setup_kwargs) ∙ EOF from setuptools import setup setup_kwargs = { 'name': 'myapp', 'version': '0.0.1', 'packages': ['myapp'], 'install_requires': ['httpx'], 'entry_points': {'console_scripts': ['myapp = myapp.cli:main']}, 'python_requires': '\u003e=3.10' } setup(**setup_kwargs) Now that we have a pretty basic setup.py file and everything else configured, we can make the app: ❯ shiv -c myapp -o myapp.pyz . Processing /home/joe/code/test Installing build dependencies: started Installing build dependencies: finished with status 'done' Getting requirements to build wheel: started Getting requirements to build wheel: finished with status 'done' Preparing metadata (pyproject.toml): started Preparing metadata (pyproject.toml): finished with status 'done' Collecting htt","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:3:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"The Use Case Being able to package your entire app into a zip file has some incredible benefits, namely that you can now run your entire app on any system that just has an appropriate version of Python installed. For applications where your app just needs to run without tweaking, this means that someone (or something) can just grab your compiled and finished zipapp and just… run it. No fuss and no stress. Okay, maybe not quite 'no fuss'. You’ll want to make sure that you’re ‘compiling’ on the same type of OS that you’re deploying to if you’re bundling any compiled C extensions. Regular Python code should be totally fine. I wouldn’t recommend that you check this out unless I’d given it a thorough test myself; the nonprofit I run, the Grafeas Group, has been running all of our production services as zipapps for the last 8 months. That’s: three Reddit bots a Discord bot a Slack bot a Django monolith that handles our website and APIs Deployments have never been easier (and are completely controlled via Slack commands!) – it’s literally as easy as backing up the existing zipapp, downloading the new one, and running it. The Slack bot, Bubbles, updates itself by downloading the new version on top of the existing one and restarting its own service! The benefit here is that if the new version fails, getting back to a working state just swapping out the older version of the zipapp and restarting the service. What’s that? You made changes to the virtual environment between versions? Doesn’t matter because each zipapp uses its own environment. If it compiles and it works, it can’t be affected by any other zipapp, even later or earlier compilations of the same system. Spinning up a new server is as easy as getting a new VM, installing Python on it, and slapping the zipapps into place with their respective environment variable files. We intentionally keep it simple because this is a volunteer gig and there’s no reason to muddy the devops waters by adding something like Docker. But let’s say you wanted to add Docker or another container; would that be any more complex? Honestly, not really. You’d basically just get the official Python container, drop your zipapp onto the root and set your launch script to call it. It does kind of defeat the purpose of easy updates, but it can be done! ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:4:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"Stuff to Watch For As cool as using shiv for easily-deployable apps is, there are a few things that you need to know if you want to use it in production. ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:5:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"Abandoned Environments shiv puts the virtual environment for that zipapp in ~/.shiv unless you override it, and since each zipapp (and each version of each zipapp) has its own virtual environment, that means that this directory can get reasonably busy. The easiest way to address this is to use the “preamble” section of shiv’s setup, which allows you to run a single script before actually starting the zipapp. There’s a complete preamble script that handles abandoned environments available in the shiv documentation – adding and extending it is pretty straightforward, but it is something that you need to be aware of as environments can build up across deployments. ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:5:1","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"Path() Shenanigans The only other major thing you need to watch out for is relative paths. Let’s edit our cli.py file: import os import pathlib def main(): print(os.getcwd()) print(pathlib.Path(__file__)) if __name__ == \"__main__\": main() If we run this directly with python myapp/cli.py, here’s what I get: ❯ python myapp/cli.py /home/joe/code/test /home/joe/code/test/myapp/cli.py But if we compile this into a zipapp, things will look a little different: ❯ shiv -c myapp -o myapp.pyz . Processing /home/joe/code/test ... ❯ ./myapp.pyz /home/joe/code/test /home/joe/.shiv/myapp.pyz_c1a18b172051ba68db2091f324e067c2e9c6b74dad677c71f3748348c2b376d6/site-packages/myapp/cli.py …which is not where we expected it to be. That means that if you want to load external files that are in the same directory as the compiled zipapp (and os.getcwd() might not be accurate for your use case), you’ll need to ask shiv itself where you’re running. Thankfully, there’s an extra little bit that gets injected into the final zipapp during build time, and there are a couple of utilities there that can help us out. Let’s rebuild our script a little bit – now we’ll do a check to see if shiv is available in the current environment and then print out the directory that our zipapp is in. This would be useful anytime you want to load external files in the same directory, like a .env file, a db.sqlite3 file, or something else along those lines. Here’s the new cli.py file: import os from pathlib import Path try: from shiv.bootstrap import current_zipfile IN_SHIV = True except ImportError: IN_SHIV = False def main(): print(f\"Calling from {os.getcwd()}...\") if not IN_SHIV: print(\"shiv is not installed.\") print(Path(__file__).parent.parent) else: with current_zipfile() as archive: if archive: print(\"shiv is installed and we are inside a zipapp!\") print(Path(archive.filename).resolve(strict=True).parent) else: print(\"shiv is installed and we are NOT in a zipapp!\") print(Path(__file__).resolve(strict=True).parent.parent) if __name__ == \"__main__\": main() Now, let’s try running it! # outside the environment, calling directly: ❯ python myapp/cli.py Calling from /home/joe/code/test... shiv is not installed. /home/joe/code/test # inside the environment, calling directly: ❯ python myapp/cli.py Calling from /home/joe/code/test... shiv is installed and we are NOT in a zipapp! /home/joe/code/test # calling the zipapp: ❯ ./myapp.pyz Calling from /home/joe/code/test... shiv is installed and we are inside a zipapp! /home/joe/code/test We use this method to create a BASE_DIR variable that’s accessible throughout the application along the lines of Django’s BASE_DIR (which is very wrong when packaged with shiv). That allows easy loading of external files and makes it work the way you expect it to. A little bit of boilerplate, but nothing too bad once you know to watch for it. ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:5:2","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["python"],"content":"Conclusion If you’re looking for a low-tech way to deploy a single python app (or a BUNCH of them!) or just want to pass scripts and things around to coworkers, shiv is worth your time to check out. Coupled with building and releasing the zipapps in your CI pipeline, it’s a system that is really hard to beat. Usability is great, using it is a snap, and if you pair it with click, you can get extremely usable CLI programs for essentially no cost. The linked repositories in this post are a great place to look if you’re wanting to see what this looks like in practice, and you can also take a look at my self-updating utils script here if you’d like to see how click can be used to add an easy --update flag that checks for a new release and automatically installs it! Happy packaging! ","date":"2023-04-23","objectID":"/shiv-the-tool-you-didnt-know-you-wanted/:6:0","tags":["python","terminal"],"title":"shiv - the Python Tool You Didn't Know You Wanted","uri":"/shiv-the-tool-you-didnt-know-you-wanted/"},{"categories":["projects"],"content":"Gitea Actions - the new self-hosted CI Hey, you in the future! I don’t intend to update this as time goes on, so if you’re reading this far from when it was written, just know that it might be out of date. Use your best judgement! As of the brand new Gitea 1.19.0, Gitea finally has a built-in Actions system! It’s intentionally very close to GitHub Actions, meaning that many of the yaml files you’ve carefully built up over the years will just work out of the box! And for the most part, that’s what happens… but since this is a new system, there are always some rough spots. In this case, the question is “what happens if you try to run the GitHub setup-python action on a Debian runner?” Tl;dr: it explodes in a very confusing way. Let’s dive into that. (Want to skip to the important bits? Click here!) ","date":"2023-03-23","objectID":"/gitea_actions_and_python/:1:0","tags":["gitea-1.19.0","gitea actions","debian","python"],"title":"Gitea Actions, Python, and Debian","uri":"/gitea_actions_and_python/"},{"categories":["projects"],"content":"The Setup I run Gitea on my local Unraid server in Docker, which has a single VM set aside to act as the runner. Actually getting the runner set up was pretty great - the full instructions are here, but here’s the basics. On Gitea, you’ll need to start by enabling Actions. This is deceptively simple, but does require editing the app.ini file. Just drop this anywhere in it: [actions] ENABLE = true Restart Gitea and you should see a new option, Runners, in the Site Administration section. Should appear in this general location. After that, you’re good to start on building the runner, and that general process is going to look like this: Build and update your VM Install Docker CE on the runner Grab the precompiled binary and drop it in the home folder I renamed the precompiled binary to act_runner just to make the rest of the steps easy, but after registering the runner, you should be able to run it manually (act-runner daemon) and see it pop up in the Gitea runners list! Awesome! One runner, ready and waiting for a job! At this point, there’s only one more thing you have to do – because this is still technically a beta feature, Actions have to be enabled on a per-repo basis. Go to the repo that you want to test with and go to Settings \u003e Repository \u003e Advanced Settings. Buried in the many options there, you’ll find this one for Actions – enable it and click the save button at the bottom of the section. Sometimes it's hard to find, but it'll be there. Now that we have all the pieces in place, we can finally test some actions! You should be able to use pretty much any GHA file (and Gitea will recognize files in both .github/workflows/*.yaml and .gitea/workflows/*.yaml), but start with a simple one. Since pretty the majority of my projects are in Python, I started with this existing release script for a Python-based system utility I wrote for myself: name: Release on: push: branches: - master jobs: build: runs-on: ubuntu-latest permissions: contents: write steps: - uses: https://github.com/actions/checkout@v2 - uses: https://github.com/actions/setup-python@v4 with: python-version: '3.11.x' - name: Install Env # this should be all we need because shiv will download the deps itself run: | pip install --upgrade pip pip install shiv pip install poetry - name: Add CURRENT_TIME env property run: echo \"CURRENT_TIME_VERSION=v$(date '+%s')\" \u003e\u003e $GITHUB_ENV - name: Build the sucker run: | sed -i -e \"s/?????/${{ env.CURRENT_TIME_VERSION }}/g\" src/__init__.py make build - uses: https://github.com/ncipollo/release-action@v1 with: artifacts: \"utils\" body: \"It's releasin' time\" generateReleaseNotes: false tag: ${{ env.CURRENT_TIME_VERSION }} commit: master token: ${{ secrets.PAT }} You’ll notice that there’s only one change from a standard GHA file – I’ve prepended https://github.com/ to each step that uses an external action (and I’m not even 100% sure if that’s needed, but that was in the examples so I’m rolling with it). Spoiler alert! I learned after posting this that the upload step doesn’t work with Gitea! GitHub allows you to create a release and add assets to that release in a single step, but Gitea requires that you create a release, then attach assets to that release. See the bottom of this page for the updated step you can tweak to get that working on your server. I also had to create a new secret – since I use the Personal Access Token on GitHub added to the repo, I went looking for a suitable replacement on Gitea. I’m very pleased to report that not only can repositories hold secrets (as expected) but you can assign secrets to your user account and they’ll automatically apply to all your repos! I created a basic token with repository permissions and added it as a user secret called PAT – that section of the run file works 100% as expected. Bravo, Gitea! Shh. It's a secret. When I went to run this with a push though, something interesting happened: it exploded on the “setting up Python” step, which I honestly expected to be fairly nondesc","date":"2023-03-23","objectID":"/gitea_actions_and_python/:2:0","tags":["gitea-1.19.0","gitea actions","debian","python"],"title":"Gitea Actions, Python, and Debian","uri":"/gitea_actions_and_python/"},{"categories":["projects"],"content":"The Problem When debugging, the action failed with the following error: ##[debug]Unable to locate executable file: lsb_release. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable. Before we get too deep here, this is a partial red herring, but one that will eventually lead us to the real problem. The reason it’s a red herring is that the error message is correct, but not for an obvious reason. Debian doesn’t ship with lsb-release, the package that will let you run the lsb_release command. (You can install it with sudo apt install lsb-release, but that still won’t solve the issue.) What it’s actually saying is that it can’t find lsb_release on the Docker container the runner downloaded. For reasons I don’t completely understand, this is not a problem that is solvable by simply installing lsb-release in an earlier step of your workflow file – it’ll still explode with the same error. On your runner VM, in the directory where you registered act_runner, there is a hidden file called .runner. If you open that up, you’ll see that there is a section called labels, and it (most likely) looks like this: \"labels\": [ \"ubuntu-latest:docker://node:16-bullseye\", \"ubuntu-22.04:docker://node:16-bullseye\", \"ubuntu-20.04:docker://node:16-bullseye\", \"ubuntu-18.04:docker://node:16-buster\" ] The node:16 containers work well for most things, but for some reason they don’t work out of the box for this use case. What we can do is swap out these images for ones that are configured correctly: \"labels\": [ \"ubuntu-latest:docker://catthehacker/ubuntu:act-latest\", \"ubuntu-22.04:docker://catthehacker/ubuntu:act-22.04\", \"ubuntu-20.04:docker://catthehacker/ubuntu:act-20.04\", \"ubuntu-18.04:docker://catthehacker/ubuntu:act-20.04\" ] After you change out the label section, restart the runner and then restart the job through the Gitea interface (or a push to your repo). Ignore the extra debug 'lsb_release' step! In a tremendously surprising move, even the release action worked out of the box, successfully pushing a release to my repo with no issues. It created the release, but as it turns out, Gitea will not allow you to create a release that contains assets in a single call. Here’s the replacement for the release action listed above: - name: Create release! run: | JSON_DATA=$( printf '%s' \\ '{'\\ '\"tag_name\":\"${{ env.CURRENT_TIME_VERSION }}\",'\\ '\"name\":\"${{ env.CURRENT_TIME_VERSION }}\",'\\ '\"body\":\"RELEASE THE KRAKEN\"'\\ '}' \\ ) echo \"\"\"release_id=$(\\ curl -X POST \\ -s https://${{ secrets.SERVER_URL }}/api/v1/repos/${GITHUB_REPOSITORY%/*}/${{ github.event.repository.name }}/releases \\ -H \"Authorization: token ${{ secrets.PAT }}\" \\ -H 'Content-Type: application/json' \\ -d \"$JSON_DATA\" \\ | python3 -c \"import sys, json; print(json.load(sys.stdin)['id'])\"\\ )\"\"\" \u003e\u003e $GITHUB_ENV - name: Upload assets! run: | curl https://${{ secrets.SERVER_URL }}/api/v1/repos/${GITHUB_REPOSITORY%/*}/${{ github.event.repository.name }}/releases/${{ env.release_id }}/assets \\ -H \"Authorization: token ${{ secrets.PAT }}\" \\ -F attachment=@utils Not particularly glamorous, and getting this figured out was kind of a pain, but hey, it’s at least fairly portable. Besides, copying and pasting between workflow files is a time-honored tradition. 😂 Major props to the Gitea team for getting this out the door – I’m so excited that it’s here and very excited to use it on my repos! ","date":"2023-03-23","objectID":"/gitea_actions_and_python/:3:0","tags":["gitea-1.19.0","gitea actions","debian","python"],"title":"Gitea Actions, Python, and Debian","uri":"/gitea_actions_and_python/"},{"categories":["projects"],"content":"Sometimes the past just needs a little kick to get into the future. As I get older, something that annoys me frequently is having to find different cables to charge things. As a direct result of this, I’ve started tailoring my shopping to find things that I can power with a single connector: USB-C. This list includes: laptop(s) both our phones monitors thumb drives xbox controllers my soldering iron arc lighter for candles …and other various things Occasionally, with enough time and research, sometimes I get a craving to dive into my box of parts and forcibly shove a USB-C port into something so that I can eliminate another custom cable from my life. (And yes, I know that sometimes a proprietary cable really is the right way to go for various reasons – for example, smart watches that don’t support wireless charging.) Today’s USB-C adventure involves my new-to-me New 3DS XL. But first: Note For those of you just as confused about the naming as I was, here’s the rough layout of the Nintendo DS line: Nintendo DS Nintendo DS Lite Nintendo DSi Nintendo DSi XL Nintendo 3DS Nintendo 3DS XL Nintendo 2DS New Nintendo 3DS New Nintendo 3DS XL \u003c– you are here New Nintendo 2DS XL ","date":"2023-03-03","objectID":"/3ds-and-usbc/:1:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":["projects"],"content":"Why? I’ve always been a fan of handheld game systems, and today’s handheld game platforms (that are not phones) have a very big problem: namely, the Switch is too big to comfortably fit in your pocket. My first hand-held console was a teal Gameboy Color in 1996. I loved it to pieces, and some of my favorite gaming memories were spent on the Gameboy Advance and the Gameboy Advance SP. In the years since, I’ve since refurbished my original Gameboy Advance SP in a fantastic neon green clear shell with a new screen and other upgraded components so that it can live a life of gaming with my brother, but his still relies on the original cable. I put a lot of hours on this thing back in the day. But hey, this isn’t about the SP, this is about the 3DS. So let’s talk about USB-C. Okay, one glamour shot of my personal SP. Hey, that's a familiar-looking cable... ","date":"2023-03-03","objectID":"/3ds-and-usbc/:2:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":["projects"],"content":"No, not that. Why the 3DS? That’s an even easier question to answer. As far as handheld games are concerned, I’ve always preferred Nintendo’s offerings, and the 3DS (especially the New 3DS) finds itself at a very interesting crossroads. Not only can it play relatively recent games and play them well, it has surprisingly-capable emulation capabilities. From MAME cabinets to the Playstation and more, basically everything that I want to emulate (that isn’t the glory of the N64 😭) is available and working flawlessly. Plus, the 3DS is officially dead as a platform, which has two primary benefits: they’re incredibly easy to jailbreak and alternative eShop options allow… finding… whatever game you’re interested in for the platform, which is extremely helpful when the official eShop shuts down later this month. The New 3DS XL was manufactured until 2019, so there are still a lot of them floating around, and the sheer number of units with the relatively recent closure of the line means there’s a lot of activity in the homebrew and jailbreaking scene. ","date":"2023-03-03","objectID":"/3ds-and-usbc/:3:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":["projects"],"content":"So… USB-C. Mmhmm. USB Type C. It’s pretty great if I do say so myself. It is, of course, not without flaws (mostly involving labeling and different cable types), but is otherwise basically my favorite cable. Strategically placed USB-C cables dot my house, enabling charging capabilities beyond my wildest dreams. (There are a couple of Micro-USB cables too; I’m not a monster. But honestly if I could get everything in USB-C, I would.) Every ‘special’ cable that I can eliminate from my life is one less cable that I have to manage and find a place for. That’s not to say I’m completely against the use of adapters, either; they have their place. If the special cable I’m working with can use 5v in to charge, sometimes it’s quite easy to just lop off the end and solder in a USB-C connector with the appopriate resistors so that it can now act as an adapter of sorts on the chargers we already have access to. But sometimes… sometimes it’s more fun to just fix the connector. If the connector you’re using is small enough, you might be able to simply unsolder the micro USB port (or whatever was there before) and solder in a USB-C breakout board and map the outputs to the appropriate places on the board. However, this has three potential issues: there might not be enough space anyway the smaller the connector, the less likely it has the required two resistors in order to set the charge voltage any time you have to make substantial changes to an existing circuit board, even more standard additions like this that don’t require SMD soldering work, it gets messy. The number of tools required and the amount of space it takes up is surprisingly large, even though you don't need a lot of specialty equipment. You’ve probably noticed that’s a picture of the Gameboy Advance SP again; since I mostly did the 3DS build for me, I didn’t really take pictures. But here’s one: It took a lot of very careful filing to get to this point. Channel your inner Clickspring. ","date":"2023-03-03","objectID":"/3ds-and-usbc/:4:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":["projects"],"content":"Modding the Console My original research to the tune of “hey, is this possible” was kicked off by stumbling over this Reddit post that shows some basic information on actually performing the mod, though definitely not a full walkthrough. It’s useful to get the location of where to solder to the motherboard, but the rest isn’t very useful. We both used this USB-C breakout board from Sparkfun; at $5 a piece, they aren’t the cheapest but they already have the resistors in place to request a 5v supply from the other end of a USB-C \u003c-\u003e USB-C cable, which is critical for this application and also means I don’t need to deal with surface-mount components (which makes me a happy camper). In their design, they trimmed away a somewhat substantial portion of the support material around the tip of the stylus in order to fit the board into place; the trick here is that it’s very close to the shoulder buttons and the ZR button has a bit of internal travel inside the case. The board itself has quite a lot of extra space on it even for how small it is, so I opted for a slightly more violent method: reshaping the PCB itself instead of trimming away as much of the case. By removing a lot of the extra unused PCB, it fit nicely in a space closer to the button and gives the back of the console a much cleaner look in my opinion. The important parts are removing both of the sections of PCB for the mounting holes, as with careful installation it butts perfectly against the internal shape of the battery housing. In fact, in my console, the port is not held in place by anything but the pressure of the case and weaseling it into the single spot that it fits. I’ll be honest; this install was a bear. The motherboard has eight micro ribbon cables on three of the four sides, and two of those ribbon cables are on the bottom of the motherboard. Of the eight cables, they use three different connection methods; I guess because screw you, that’s why? This video on performing a motherboard swap was instrumental for learning how to remove each one in a way that doesn’t damage all the connectors. I’d show you the inside of mine, but I’m hesitant to open it again. As it stands, you’ll have to take this as proof that it works: Charge, baby, charge. Would I do this again? No, I don’t think so. The entire install took about 3.5 hours for me, and they weren’t particularly fun. However, I’m super stoked about the newfound functionality of the console and am looking forward to putting it to the test during some travel later this year. Here’s to our favorite games of today and yesterday! 🥂 ","date":"2023-03-03","objectID":"/3ds-and-usbc/:5:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":["projects"],"content":"Additional Resources https://consolemods.org/wiki/3DS:New_3DS_XL_USB-C_Charging_Port_Mod ","date":"2023-03-03","objectID":"/3ds-and-usbc/:6:0","tags":["usb-c","repair","n3ds","nintendo"],"title":"USB-C for Fun and... Nah, Just Fun","uri":"/3ds-and-usbc/"},{"categories":null,"content":"Open Source Software ","date":"2023-02-28","objectID":"/software_and_media/:1:0","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"FilamentColors.xyz In 3D printing, getting the right color of filament for a project is often a pain. Have you ever wondered “what filament do I need to get to match this color?” or “what looks good with this filament I already have?” These are questions FilamentColors.xyz tries to answer by providing a filament color database with over a thousand different filaments from all over the world – each one printed, measured, and automatically grouped into pre-built color palettes ready for you to use in your next project! ","date":"2023-02-28","objectID":"/software_and_media/:1:1","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Grafeas Group, Ltd A small international nonprofit that I co-founded with James Coe, this registered 501(c)3 in the US has over 5,875 volunteers and aims to increase accessibility on the internet. By creating text versions of internet content, everyone has a chance to participate in the discussion. Our volunteers have, at the time of this writing, completed over 270,000 transcriptions and descriptions online and through Reddit for those who need them. The organization uses six bots total; three on Reddit’s side and three internal bots for managing ourselves and our community. ","date":"2023-02-28","objectID":"/software_and_media/:1:2","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Grafeas: The External Bots u/transcribersofreddit The primary bot that volunteers interact with, this bot is responsible for finding new content, posting it to the subreddit, and working with volunteers as they complete transcription jobs. This is the first bot that I wrote for the project, and the very first version was knocked out in my airb\u0026b room in between PyCon sessions in 2017! u/transcribot Sometimes it’s helpful to have a starting point for some of the longer transcriptions, so u/transcribot runs each and every picture through OCR and posts the (often hilariously wrong) results where the volunteers can access them. It follows u/transcribersofreddit around our subreddit, toddling along and trying its best. u/ToR_Archivist Arguably the least-known of the trio, the Archivist takes completed posts, grabs the link to the actual completed transcription, and posts it to the TranscribersOfReddit Archive for folks who need it. It also removes posts from the primary job board as they ‘age out’ if no one claims them. ","date":"2023-02-28","objectID":"/software_and_media/:1:3","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Grafeas: The Internal Bots Blossom The Django monolith that powers it all and the keeper of our data! Blossom is where all of our central processing takes place; the other five bots make very few decisions for themselves and mostly look to Blossom for guidance. Blossom also powers the organization homepage, grafeas.org! Bubbles Every organization needs an overly chatty chatbot, and Grafeas is no different. Bubbles runs in our internal Slack and assists with anything we need – anything from gathering data on potential subreddits to providing pictures of cute animals to handling our deployments of all six bots (including herself!) to production! Buttercup Buttercup runs our volunteer Discord! Host to a whole bunch of cool commands and data visualization stuff, Buttercup helps enforce username standards and also allows volunteers to track their progress on various challenges and get access to other cool data to see how they’re doing. ","date":"2023-02-28","objectID":"/software_and_media/:1:4","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Grafeas: The Other Stuff Occasionally we work on other systems as we prototype ideas or spin out functionality into other repositories as needed. Utonium As we grew Bubbles, we realized quickly that the slack-bolt package that Bubbles used was not really designed to handle all the commands that Bubbles has, so I designed a plugin system from the ground up to handle the (vaguely ridiculous) number of Slack commands that we need to handle across different platforms. It’s not the easiest to integrate, but works well for our needs! Caroline An idea that we toyed around with for using Redis or Elasticsearch as a pseudo-relational backend that relies on JSON Schema for validation. Still a project that I’m quite proud of, even though I’m not sure it should ever actually be used. ","date":"2023-02-28","objectID":"/software_and_media/:1:5","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"asbestos At SpotOn, we work with a lot of data in Snowflake but there is was no way to mock the connection cleanly for testing functions that use Snowflake data or for developing against a Snowflake call and paying to run the same query over and over. Enter asbestos, a project named after the fake snow from The Wizard of Oz. (That’s true: the snow used in the movie is 100% pure asbestos. Horrifying, isn’t it?) Asbestos allows you to mock the Snowflake connection, store SQL queries and expected answers, and then spit back the answers when you call Snowflake normally. Fun fact: the original name for this project was snowfake, but Snowflake’s lawyers told us we couldn’t do that. 😭 ","date":"2023-02-28","objectID":"/software_and_media/:1:6","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"emailmagic mailto: links are annoying, and it’s weird to me that we don’t have an industry solution to this problem yet. emailmagic watches for mailto: links, then makes the link pop up a modal so you can open the link in your preferred email client or just use the default browser behavior. On the sites that I write myself (e.g. not this one), I use Bootstrap as my UI library of choice so that I don’t have to reimplement everything from scratch, and emailmagic is styled using Bootstrap 5 so that it can be a clean drop-in addition. See the readme for more information. ","date":"2023-02-28","objectID":"/software_and_media/:1:7","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"What day is it? Have you ever wished that you had a very specific yet startlingly useless way of identifying what day it is? Do I have the answer for you…! ","date":"2023-02-28","objectID":"/software_and_media/:1:8","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Yarn Calc-inator A basic meters \u003c-\u003e yards conversion tool for identifying how many skeins of yarn you need to purchase for a pattern if the measurements are different or the amount of yarn in each skein is different. Written for my partner to aid in her crochet projects. ","date":"2023-02-28","objectID":"/software_and_media/:1:9","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"Media ","date":"2023-02-28","objectID":"/software_and_media/:2:0","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-04-21 | Makers On Tap Podcast, Episode 76 Makers On Tap is a podcast by makers, for makers - we chatted about filamentcolors.xyz, accessibility, nonprofits, and general life. ","date":"2023-02-28","objectID":"/software_and_media/:2:1","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-04-20 | Faraday Tech Cafe Podcast, Episode 15, Part 2 Hosted by Gwen Faraday, this is part two of a long-form interview covers some of my history and mostly focuses on Grafeas and TranscribersOfReddit. ","date":"2023-02-28","objectID":"/software_and_media/:2:2","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-04-13 | Faraday Tech Cafe Podcast, Episode 15, Part 1 Hosted by Gwen Faraday, this is part one of a long-form interview covers some of my history and mostly focuses on Grafeas and TranscribersOfReddit. ","date":"2023-02-28","objectID":"/software_and_media/:2:3","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-04-05 | VRRF 2020 // Virtual Reprap Festival Since the Midwest Reprap Festival (MRRF) was cancelled due to COVID, it happened over YouTube instead! I was able to present and discuss filamentcolors.xyz. ","date":"2023-02-28","objectID":"/software_and_media/:2:4","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-02-23 | WIRED This is the same article from WIRED UK, but syndicated to the main site! ","date":"2023-02-28","objectID":"/software_and_media/:2:5","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":null,"content":"2020-02-23 | WIRED UK Interview from Alex Lee of WIRED UK about Grafeas, TranscribersOfReddit, and the international impact of our work. ","date":"2023-02-28","objectID":"/software_and_media/:2:6","tags":null,"title":"Software \u0026 Media","uri":"/software_and_media/"},{"categories":["projects"],"content":"The easiest aquarium you’ll ever take care of. Sometimes a project just sticks in your head and won’t let go; for days, months, or even years. This is the story of one such project. ","date":"2021-01-26","objectID":"/asciiquarium/:1:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["projects"],"content":"ASCIIQuarium In a previous job as a software developer around 2016, I came across this script from Kirk Baucom called asciiquarium. It’s a single-file script that animates a lovely ocean scene using only text! Fish swim, a small castle chills out in the corner, and occasionally special events happen (watch for the shark and appearances of Nessie!). I ran it in a small terminal window every day around my normal work, enjoying it simply for being a quick escape from whatever problem I was working on at the time. ASCIIQuarium screenshot courtesy of [robobunny.com](https://robobunny.com) During that time, I had an idea: use a low-power computer, an old display, and a bit of solder to create a permanent display for asciiquarium to have my very own digital fish tank that wouldn’t need feeding (and had pretty colors)! It took a long time to come to fruition, but I’m incredibly happy with how it turned out. Read on for details! ","date":"2021-01-26","objectID":"/asciiquarium/:2:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["projects"],"content":"The Parts The original plan was to use a Raspberry Pi Zero (I have a lot of them), but when I ventured out to the garage to see what I could find in terms of a screen, the only thing that came up in my search was my partner’s old 22\" TV from college. As an older TV, my connection options were limited to VGA, RCA, component, or S-Video. That wasn’t a total killer though, because the Raspberry Pi 1 Model A (retro circa 2013!) has an RCA video out! SparkFun Electronics from Boulder, USA - Raspberry Pi - Model A, CC BY 2.0, https://commons.wikimedia.org/w/index.php?curid=26785859 Our donor screen is an Emerson 22\" TV / DVD combo. It served a loyal life, delivering many marathons of the Lord of the Rings (extended editions!), but was eventually relegated to the garage. There’s no remote anymore, so who knows what extra features it’s supposed to have. What we care about, and what matters, is that when it turns on, it launches directly into Video 1 mode (where our RCA input is plugged in). To power the Pi, I found an old Samsung phone charger that we don’t have anymore and a no-brand micro-USB cable. After testing to ensure that it met the power requirements of the Pi, it was time to get the software sorted. ","date":"2021-01-26","objectID":"/asciiquarium/:3:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["projects"],"content":"The Software ASCIIQuarium is a relatively small script written in Perl that only needs a little bit of setup in order to get working. The original source can be downloaded from Kirk Baucom’s site, but the version I’m running is actually one that I edited myself to reduce the frequency of special events and make it more suited for this type of installation. The modified version can be downloaded from GitHub. I want to give a major shout-out to the Raspberry Pi Foundation for their amazing support of old hardware; getting the Pi set up was a breeze by just downloading the latest command-line-only version of Raspbian and flashing it to an SD card using the new Raspberry Pi Imager. LC_LOCALES and You I ran into one issue with LC_LOCALES and other keys not being set correctly; running “raspi-config” and setting the locale information there fixed the problem after rebooting. Perl is included in the default of Raspbian, so the only requirements we have are to install the curses library (a library that allows us to draw in the terminal) and install the Term::Animation package using Perl’s CPAN command to actually handle the movements. # this first part might take a while sudo apt update sudo apt upgrade -y # dependencies! sudo apt install libcurses-perl git # just accept the defaults if it asks you things sudo cpan install Term::Animation # Grab the modified code git clone https://github.com/itsthejoker/asciiquarium After cloning the repo, we can move into the folder (cd asciiquarium) and make the program runnable with chmod +x asciiquarium. Running it by calling ./asciiqurium shows that it works and everything’s animating! The last thing to do is make it run on startup, which is easily doable by adding an extra line to the .bash_profile file: /home/pi/asciiquarium/asciiquarium. ","date":"2021-01-26","objectID":"/asciiquarium/:4:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["projects"],"content":"The Assembly Actually assembling everything is fairly straight-forward, but it did require some soldering. One of the things that I wanted for this build was that it would only require one cable; that meant that I had to wire the USB charger into the TV somehow. After cracking open the charger to free the circuit board, opening up the back of the TV (don’t do this unless you know what you’re doing!) showed that there was a great safe place to solder in the charger with access to the 120v power cable. Test fits and a little hot glue helped secure the charger in an out-of-the-way location on the main board of the TV. One gutted charger in the guts of a TV! With the USB power in place, only two things remain: securing the Pi to the back of the TV and getting it ready to install. The first was easy enough to solve with – you guessed it – more hot glue (though the Pi was placed into a case first!). The wiring was connected again to make sure it worked, and this is the wiring arrangement I came up with: An acrylic case to the rescue for keeping my Pi safe! After confirming that it worked as expected, the next step is to pull the SD card and back it up. This installation will be turned on and off by the power plug through a timer, so it’s important to make the operating system read-only to guard against corruption. After making it read-only, no changes can be made – so backing it up prior to performing that operation is critical. Back up your work! Seriously, if you’re following along, back up your SD card now. Take a full disk image using something like Win32Imager – you don’t want to make your OS read-only and THEN find out that something is wrong. You’d have to wipe it and start from scratch. I used this article from Adafruit to actually perform the operation with the card plugged into a different Pi, and as far as I can tell it worked perfectly. When the SD card was slotted back into the Pi on the TV, everything worked perfectly! …well, almost. It turns out that pretty much all TVs are designed so that when they’re plugged in, they don’t turn on automatically. This is a problem for this install because it’ll be turned on and off by the timer. Thankfully, the internet comes through once more with a solution… involving more hot glue. Yep. Not going anywhere. ","date":"2021-01-26","objectID":"/asciiquarium/:5:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["projects"],"content":"The Results Officially, that brings this “aquarium” to completion. A single power cable, easy power control, and lovely analog feel thanks to the RCA cable – overall a really easy project that’s been several years in the making. 4fps. The way it should be. ","date":"2021-01-26","objectID":"/asciiquarium/:6:0","tags":["raspberry pi","upcycling","terminal","perl"],"title":"The Asciiquarium","uri":"/asciiquarium/"},{"categories":["writing"],"content":"What do I do with the things I make? All of this reading and we’ve finally made it to the end of the process! The previous post touched on things to know before and during the print, so we’ll wrap up the series with a bit of knowledge on things you should know about the end of the process. In this post, we’ll talk about: The end of a 3D print Failed prints Cleaning up Finishing Touches Printer Maintenance ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:1:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"What Happens When a Print Finishes? One of the best parts of owning a 3D printer is the anticipation and excitement of seeing the completed part that it just created. A machine in my home that can take a few meters of plastic line and turn it into something amazing – what’s not to like? Every 3D printer has a different way of announcing that it’s done with a job, but generally the important part is that the machine will move the hot end out of the way so you can access the part that just finished printing. This next part is so important it’s going in its own little bubble: Tip You won’t be able to remove a printed object from the build surface of the printer immediately when it’s done – you must wait for it to cool down. The part will get progressively easier to remove as the machine cools down; the sooner you try to remove it, the more you risk damaging your part and printer through brute force. Sometimes a part will pop off the build plate after it cools down and you can pick it right up… but sometimes it will require some gentle (but firm) force. You’ll want to use the print removal tool – or, very carefully, a utility knife blade – to get under the part so that it can lift off the build plate. Warning You’ll want to make sure to be extra careful if you’re using anything sharp; one wrong move and you’ll damage the build plate, the part you just printed, or yourself. Sometimes removing a part can take a few minutes, so don’t be discouraged. Take your time and go slow. This is also a great reason to look into a 3D printer that has a removable, flexible build plate: it makes removing prints much easier at the cost of a slightly more expensive setup. ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:2:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Sometimes Prints Fail… and That’s Okay Running a 3D printer is an inexact science. Sometimes parts don’t stick to the build plate; sometimes the nozzle will jam; sometimes things won’t move the way that they should. It’s not just you – it’s something that literally everyone deals with in this hobby. Sometimes it will take several tries before you get a result that you’re happy with, and that may require tweaking the physical printer or the settings in your slicer program. Most of the time, print failures don't get very far! Image thanks to @tgibriday The best way to approach this when it happens is to clean up the plastic spaghetti and try again. It’s important to watch at least the first layer get printed, as most failures will happen at this time. There are many, many different things that could be wrong (nozzle too close to the bed, nozzle too far away from the bed, wrong temperatures, oil on the build surface, etc.) It’s also a great idea to check on things occasionally just to make sure that it’s still trundling along. Sometimes they're a bit more effort to clean up -- this one wasn't caught for several hours. Image thanks to @uncommonparts This particular print failed sometime during the night! Sometimes failures trend more towards “crap, it’s broken” levels – and that’s okay too! That’s where the tinkering comes in, because there are very few issues that are not fixable. That’s part of the fun! ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:3:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Cleaning Up Your Workspace When you run a 3D printer for a little bit, you’ll find that there are little bits of plastic left over from the printing process that aren’t actually usable or a part of your projects – this is waste plastic. It’s plastic used to make sure that everything is flowing correctly, plastic used to make sure that prints are adhering to the bed, or plastic used to make sure that a color change has worked. There’s no use in keeping any of this, so it goes straight into the trash. You’ll want to keep a small trash can nearby so that you have somewhere handy to throw these bits – they accumulate startlingly fast. There will also be other trash from things like new spools or new parts if you tinker with the machine a lot; all that will also need to find a new home in the trash can. ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:4:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Cleaning Up Your Prints Not every 3D print comes off the printer looking amazing – there may be some extra work that should happen. Small strings can be vaporized with a hairdryer set to “hot” and little blobs can pop off with a little help from a hobby knife. Tip If you don’t already have a hobby knife (commonly sold under the brand names X-Acto and Excel), we recommend one that tightens at the back of the knife instead of at the blade. This type also commonly has a small metal plate that stops it from rolling on the table! Hobby knives are extremely sharp; make sure it stays capped and put away when not in use. Some more complicated parts will require support material – extra plastic that will get thrown away but whose only job is to help the overall print succeed – that will need to be trimmed away. A small pair of micro pliers can help break away material and a set of flush cutters will help tremendously. Tip Flush cutters are so useful that they tend to disappear to other places. If tools have a habit of misplacing themselves, you may want to get a few of them. ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:5:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Putting the Finishing Touches on Your 3D Prints Sometimes you may want to make something that doesn’t quite fit on your 3D printer. If that’s the case, there may be a few pieces that fit together with screws or glue. Screws are easier because they don’t usually scuff up the surface of your work, but they have extra costs in actually buying the hardware… so sometimes that just leaves glue as the next best option. If gluing together parts is something that you’re interested in doing, you’ll want to put some plastic-specific glues on your wishlist; something like 3D Gloop may be a good place to start. Tip Although it may be tempting, be careful when using superglue (sometimes called cyanoacrylate or just “CA” glue) – it’s really good at what it does, but reacts badly with most plastics and leaves white blemishes everywhere it touches. That may not be an issue depending on what you’re gluing together, but it’s worth noting. Sometimes prints just don’t have enough pizzazz if they’re just the color of the plastic, so painting might be the next step. Painting is a huge topic, and the folks at All3DP have a great primer (pun intended) about painting PLA and ABS 3D prints – check it out here! ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:6:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Printer Maintenance 3D printers are movement-heavy over a small amount of area, so keeping up with maintenance is important. Most of the time, you’ll just need a little oil; if you’re in a pinch, 3-In-One Multipurpose Oil will do a great job of keeping things moving smoothly, but for most things on a 3D printer some white lithium grease is the best choice. 3-In-One or other lighter oils will need to be reapplied more frequently, but they also work better at getting into cracks and crevices. Tip Don’t use anything heavier than white lithium grease; if the grease is too heavy (or if there’s too much), it will cause more of a problem than not having it at all. Also… Warning Do not use WD-40! They say it can do anything… and what it will do is gum up the bearings in your machine. Stick with the two options outlined above. Dust and hair stick to grease, so if the machine is in a dusty (or pet-heavy) area, it might need additional cleaning. A little compressed air can help get plastic bits and dust out of hard-to-reach corners! Belts degrade over time (very slowly) so an occasional check to make sure they’re still tight is a good idea. ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:7:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"Wrapping Up Over the last four posts, we’ve gone over things you need to know from “what is this 3D print thing” all the way to finishing your first print. There’s a wealth of good information online about how to fix potential issues, modifications for whatever printer you may want to get, suggestions for various improvements, and more. If you’re interested in reading more, Matterhackers has an excellent set of articles about getting started in 3D printing that anyone should read. They definitely aren’t required to really dive in, though! If 3D printing as a hobby is interesting to you and you’re not worried about the possibility of getting some grease on your hands, then take a look at some of the machines that are out there. The great thing about the 3D printing community is that it thrives on sharing knowledge and wisdom; if you’re curious about something, reach out and ask! There’s always someone around with suggestions or ideas for what to try next. ","date":"2020-08-16","objectID":"/intro_to_3d_printing_part_4/:8:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 4","uri":"/intro_to_3d_printing_part_4/"},{"categories":["writing"],"content":"What other things do I need to think about? Now that we’ve covered what you need to know before you even get a 3D printer, we need to talk about the hidden costs of printing. There aren’t a lot, but there are definitely some things that you’ll need to either know about or buy that won’t be in the box. Over the course of this post, we’ll talk about: Build surfaces and materials Getting prints off the bed Power Interference (specifically of the little human kind) Noise considerations Fire hazards ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:1:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Build Surfaces Every printer has a bed (the build platform that the object is printed onto) but sometimes actually getting the plastic to stick to the bed requires some… effort. Several surfaces exist, but here are the most common ones: PEI, a mildly sticky plastic Glass (just normal plate glass or a mirror) Textured metal Most 3D printers today either use PEI (a light orange color) or black textured plastic for cost purposes. Some nicer printers offer flexible textured metal build surfaces that are removable, though it’s often available as an aftermarket upgrade. A lot of printers, though mostly machines that are a few years old, use glass as the bed surface of choice. Hot plastic grips to glass very well and releases easily when it’s cool. With a quick dash of some cheap hairspray, prints will stick to the glass with no problems. Tip The recommended brand of hairspray is Aqua Net Extra Super Hold – you can usually find it for a dollar or two at Walmart or your local corner store. Keep in mind that you only need hairspray if your printer uses a glass or mirror build surface. PEI and textured metal don’t require any additional help to work, but may need cleaning from time to time. You’ll want to pick up some 90%+ isopropyl alcohol to clean them – you won’t need much, as a single bottle will go a long way. Watch out! DO NOT use acetone to clean PEI or textured surfaces; they will be ruined permanently! Other surfaces exist – everything from machined stone to painter’s tape – but the above listed ones are what you’re most likely to find. Hairspray also isn’t the only thing you can use to change the properties of surfaces like glass; you can use purpose-built chemicals like 3D Gloop or even things you might already have around the house, like Elmer’s Glue Stick! ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:2:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Getting Prints Off the Bed All that talking about different methods of getting prints to stick brings up a good question: how do we get them off the bed when they’re done? The most tried-and-true method is to use a sharpened scraper (like a paint scraper) or a purpose-built tool like this one from Gizmo Dorks. If you’re careful, wedging a razor blade under the print will often release it without too much issue, but try to stick to tools that have handles for your safety (and the safety of those around you). Tip This is why some people opt for removable, flexible build plates; when the print is finished, you simply remove the build plate with the part on it, then carefully flex the plate – the part pops off! Take a look at some example retrofit kits here or to see a printer that comes with them, check out the Prusa MK3S here. ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:3:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Power Considerations When getting ready to run a 3D printer, it’s important to remember that prints frequently last for hours at a time, and the printer can’t lose power during the print. If you live in an area that is prone to brownouts or power outages, you may want to consider investing in an uninterruptible power supply to plug your printer into. This is definitely not a requirement (for reference, none of the printers I run are on uninterruptible power supplies) but may be something that you might need. ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:4:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"(Little) Human Interference Though we talked about little humans in the last post, we’re revisiting this topic because playing with a 3D printer while it’s off and playing with one while it’s running are two very different things. 3D printers are very sensitive pieces of equipment, and if they’re bumped or jostled while they’re running, those movements will show up as defects in the finished print. It (most likely) won’t ruin the work, but it certainly won’t help. As interested as small hands may be, it’s important that they CANNOT interact with the printer while it’s hot. They could severely burn themselves. ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:5:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Noise Considerations A 3D printer is, almost without exception, not a quiet machine. It will hum, sing, and otherwise whirr its way through a print; some homes amplify these sounds and make them seem louder than they are due to their frequencies. Silencing a printer is a complex matter that can sometimes be accomplished through hardware upgrades or by running the machine slower… but nothing beats a little bit of foam. Check out this video from CNC Kitchen about quieting a 3D printer with a little bit of foam and a concrete tile. ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:6:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Fire Hazards Anything that gets very hot can cause a fire, and 3D printers are no exception. Thankfully, the number of fires caused by printers is extremely low and there are some easy things you can do to help guard against the possibility of a fire: Buy a small fire extinguisher – these are what I use; keep it nearby to your printer in a place where it can be easily grabbed Get a smoke detector and install it right above your machine Make sure that the machine is plugged into a power strip or an outlet that you can easily reach if you have to unplug it quickly Hopefully you should never have to deal with anything relating to fires or scares, but it’s “playing with fire” to not invest in some adequate protection. Also, stay away from any 3D printers under $250 USD. You get that low price when they skimp on safety features. It’s not worth it. Warning It is the official recommendation of FilamentColors.xyz that you verify that a working smoke detector is in use for the room where the printer is running. Though the chances of something going wrong are low, it is not something worth betting against. ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:7:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Wrapping Up In this post, we’ve covered a lot of things you need to know prior to (and during) your first and subsequent prints. In the next post, we’ll talk about cleaning up prints, dealing with plastic waste, and finishing up your masterpieces with glue and paint! ","date":"2020-08-09","objectID":"/intro_to_3d_printing_part_3/:8:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 3","uri":"/intro_to_3d_printing_part_3/"},{"categories":["writing"],"content":"Where in the world does it go? Now that you’ve made it through Part 1, let’s take a look at what you need to know about and what you might need to consider before either buying a 3D printer or bringing one into your home. As with every hobby, there’s a lot of extra things that aren’t written on the box; my goal is that you’ll be much better prepared should you jump in with both feet. The information is organized into three categories: before you get a 3D printer, before you use it for the first time, and after you use it. All three sections have information that you might find useful, and we recommend reading it all before making a decision. Today’s article will only be covering the first section. ","date":"2020-08-01","objectID":"/intro_to_3d_printing_part_2/:1:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 2","uri":"/intro_to_3d_printing_part_2/"},{"categories":["writing"],"content":"Before The 3D Printer The first thing, even before which printer to get, is “where will it go”? A bedroom? The living room? The garage? A 3D printer requires a fair amount of space to itself; you’ll need to make sure you can set aside space roughly the size of a coffee table where the printer will live. Remember that it’s not just the machine that you’ll need space for – there will be tools, filament, and more that needs to be stored around or nearby the printer. Filament is an even bigger question; though each roll isn’t that big, it’s easy to eventually wind up with more than expected. Some people opt for storage in closets or cabinets, while others opt for wall-mounted solutions that allow different spools to be easily grabbed. Below are some examples that show how much room this can take up! An example of closet-based storage An example of wall-mounted storage ","date":"2020-08-01","objectID":"/intro_to_3d_printing_part_2/:2:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 2","uri":"/intro_to_3d_printing_part_2/"},{"categories":["writing"],"content":"3D Printers and Pets (or Little Humans) It’s no surprise that most creatures are curious. Cats, dogs, and little humans will want to see what this new thing is that makes noise, and the extra plastic bits (we’ll talk about how to deal with plastic waste later) are especially enticing. Most of the time, they’ll investigate the machine and then move on, but some pets won’t be able to leave it alone. Here’s what you’ll need to watch out for: Hot Parts The nozzle of a 3D printer (the tip of the print head where the plastic comes out) is typically unprotected and the average print head (called the “hot end”) can reach 250C, which is ~482F. Most prints with PLA take place at or around 210˚C (410˚F), which means that little bit of metal is really hot for the entire process of printing. That will cause burns before you notice – and they hurt! Most 3D printers also have a heated bed, but the temperatures are much lower: usually ~60˚C (140˚F) or lower. You’ll want to make sure that hands or paws are not in danger of coming into prolonged contact while the machine is running. (To put this into perspective, your household water heats at a maximum of 120˚F, and safety experts suggest you keep it at an even lower temperature if you have little humans to prevent scalding. So we’re talking about a range from a little hotter than household water to pizza-cooking oven heat here.) Plastic Waste After using the printer for a bit, you’ll end up with strands of plastic (or little chunks) that aren’t part of your finished pieces. These pieces are small enough to be choking hazards for pretty much everything, so it’s important to make sure there is a plan for how to deal with them. A small container or trash can nearby will do the trick, but make sure it has a lid if there’s any risk of someone going digging for something to play with. Managing Hair Pets are great, but they frequently shed… everywhere. There’s a good chance that a dog or cat checking out a running 3D printer will accidentally leave behind a token of their interest that you’ll have to dig out of your finished prints or pick out of the machine. Hair sticks to the oil used in the moving parts of the machine, so you might have to do more maintenance. ","date":"2020-08-01","objectID":"/intro_to_3d_printing_part_2/:2:1","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 2","uri":"/intro_to_3d_printing_part_2/"},{"categories":["writing"],"content":"Allergies You may have heard that PLA, the most popular plastic for 3D printing, is a corn byproduct. If you’re worried about working with PLA because of corn allergies, you should know that there shouldn’t be an issue; in the process of converting it to a plastic, the profilin (the allergen) is burned off and is not present in the final plastic. ","date":"2020-08-01","objectID":"/intro_to_3d_printing_part_2/:2:2","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 2","uri":"/intro_to_3d_printing_part_2/"},{"categories":["writing"],"content":"Wrapping Up In this post, we’ve covered concerns and things to be aware of when identifying whether a 3D printer can fit neatly into your home. Next week, we’ll talk about preparing for your first print and what comes after. ","date":"2020-08-01","objectID":"/intro_to_3d_printing_part_2/:3:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 2","uri":"/intro_to_3d_printing_part_2/"},{"categories":["writing"],"content":"What is this 3D printing thing? There’s a lot of information about 3D printing as a hobby, but what does that all boil down to? What do you need to get started? What do you need to know before bringing a printer into your house? What kinds are there? The goal of this series isn’t to be an all-encompassing introduction; mostly, we’ll touch on the core concepts and give you terms and ideas that you can research later. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:1:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"What is 3D Printing and what is a 3D Printer? You already know about printing on paper. 3D printing is a lot like that, but the result is a physical thing rather than text on a page. Instead of ink, a 3D printer uses plastic; instead of reproducing the text on a computer screen, a 3D printer reproduces a digital model that you process and download to it. You can 3D print almost anything. Here are some examples: a doorknob a leg for that display stand that broke a while ago a bowl for your keys an adapter that fits on a vacuum a figurine a piece of art a jig to help do something a mobility aid to help open jars a robot body a mount for a piece of technology …there are so many options that you’re mostly limited by the physical properties of plastic and your imagination. With that in mind, let’s talk about the second question: what is a 3D printer? Info A machine that takes a physical medium (plastic, metal, concrete, chocolate, etc.) and carefully arranges it in a specific shape when guided by a computer. The most common type is one that melts strands of plastic about the diameter of pencil lead into strips the width of a piece of string. Have you ever had a ball of string? Even though the string itself doesn’t take up much space, it builds on itself when you have a lot in one place. That’s the same concept that most consumer 3D printers operate on. Info There are a lot of different options with what type of printer to use and what kind of material to use – like types of fabric, there are hundreds of choices. For this, we’ll only focus on the most common options. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:2:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"What You Need To get started with 3D printing, you’ll need a handful of things: a 3D printer a computer a way to get information from the computer to the printer – options include: USB cable USB thumbdrive SD card Some printers can even connect to your local network! a program called a slicer material for the printer to use patience We’re going to cover that list out of order because there are some terms that we have to get to first. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"Patience Although it doesn’t seem like it belongs there, you’ll notice that patience is definitely on that list. 3D printing is a very cool process, but it’s not a perfect process. There will be configurations that you have to modify, bolts that will need adjusting, bearings that will need oiling, and results that will need tweaking. This is just a part of the hobby, and if those things do not sound exciting or interesting, then this may not be the hobby for you. It is worth noting that there are machines that don’t require anywhere near as much maintenance / “hand-holding” in order to continue working, but they are usually several thousand dollars (or more). If you’re approaching this from the hobbyist standpoint, at least some amount of tinkering will be required. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:1","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"The Material That Gets Printed Material for 3D printing, called filament, is a very long connected line that is usually wound onto a spool. These spools are sold by weight in one (1) kilogram (2.2 lbs) rolls. The filament is sold in two diameters: 1.75mm diameter Industry standard – the majority of printers use this size 3mm diameter This is older and not used as much anymore Tip Consumer 3D printing is entirely based in the metric system. Besides the fact that the metric system is very easy to use, 3D printing is heavily rooted in open source; the first open source 3D printer, the RepRap, was created in Bath, UK, in 2004. The most common, beginner-friendly material to print with is known by its acronym: PLA. It’s not very expensive, is easy to work with, and makes reasonably strong parts. There are many different options – PETG and ABS are also popular, but they usually require some modifications / upgrades and special ventilation and temperature control to use properly. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:2","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"The Slicer Though it has an ominous name, a slicer is a program that takes a digital model and converts it into instructions that the 3D printer can interpret. These instructions are very detailed and contain all the information needed for a specific 3D printer to build the model. Sliced files (the sets of instructions) are specific to the printer they’re created for; if they’re given to a different brand or build of printer, unexpected issues (or potentially damage to the printer) may occur. Sliced files are known as gcode files; gcode is the instruction set that almost all 3D printers use. It’s also used by some larger manufacturing tools, like automated mills and lathes. You can read more about gcode here if you’re interested. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:3","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"The Computer As long you have a computer or laptop (not a tablet or smartphone) that runs Windows, Mac OS X, or Linux, then you can find a slicer to use. The three most popular free slicers (PrusaSlicer, Slic3r, and Cura) run on all three operating systems and are very forgiving on slower computers. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:4","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"A 3D Printer The printer itself is where the magic happens – where everything finally combines to produce a 3D printed object. It takes the sliced file (the gcode file) and the filament, then uses the gcode instructions to build the object one move at a time. To achieve this, the 3D printer uses specialized heaters to melt the filament to very small widths and carefully deposit it onto a build plate (usually glass or another material) so that it can build upwards by putting down more layers of plastic down. Layer by layer, very slowly, an object is built up from the build plate. This process usually takes a long time; even small objects can take much longer than expected. Most small prints can be accomplished in 30 minutes to an hour; it’s not uncommon for prints to take two, four, or even 24 hours to complete depending on the size and level of detail. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:3:5","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"},{"categories":["writing"],"content":"Wrapping Up In this post, we’ve covered some core concepts of 3D printing; what 3D printing actually looks like and what it entails. Next week, we’ll go over the next steps: the stuff you need to know and what you need to do before buying a 3D printer. ","date":"2020-07-15","objectID":"/intro_to_3d_printing_part_1/:4:0","tags":["3d printing","learning"],"title":"Intro to 3D Printing, Part 1","uri":"/intro_to_3d_printing_part_1/"}]